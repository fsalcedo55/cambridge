generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @unique @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @unique @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String              @id @unique @default(cuid())
    name               String?
    email              String?             @unique
    emailVerified      DateTime?
    image              String?
    role               String?
    accounts           Account[]
    sessions           Session[]
    students           Student[]
    lessonPlans        LessonPlan[]
    lessonPlanComments LessonPlanComment[]
}

model Student {
    id                 String       @id @unique @default(cuid())
    studentFirstName   String
    studentLastName    String
    studentDateOfBirth String
    status             String
    teacher            User?        @relation(fields: [userId], references: [id])
    userId             String?
    lessonPlans        LessonPlan[]
    Lesson             Lesson[]

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LessonPlan {
    id           String              @id @unique @default(cuid())
    title        String
    date         String
    slidesUrl    String?
    homeworkSent Boolean?            @default(false)
    Student      Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId    String
    User         User                @relation(fields: [userId], references: [id], onDelete: NoAction)
    userId       String
    comments     LessonPlanComment[]

    @@index([studentId])
    @@index([userId])
}

model LessonPlanComment {
    id           String     @id @unique @default(cuid())
    content      String     @db.Text
    createdAt    DateTime   @default(now())
    LessonPlan   LessonPlan @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
    lessonPlanId String
    User         User       @relation(fields: [userId], references: [id], onDelete: NoAction)
    userId       String

    @@index([lessonPlanId])
    @@index([userId])
}

model Lesson {
    id        String   @id @unique @default(cuid())
    title     String
    photoUrl  String
    slidesUrl String?
    number    Int
    published Boolean  @default(false)
    Student   Student? @relation(fields: [studentId], references: [id])
    studentId String?
    Unit      Unit     @relation(fields: [unitId], references: [id])
    unitId    String

    @@index([studentId])
    @@index([unitId])
}

model Unit {
    id        String   @id @unique @default(cuid())
    title     String
    number    Int
    photoUrl  String
    published Boolean  @default(false)
    Lesson    Lesson[]
    Level     Level    @relation(fields: [levelId], references: [id], onDelete: NoAction)
    levelId   String

    @@index([levelId])
}

model Level {
    id        String  @id @default(cuid())
    title     String
    number    Int
    published Boolean @default(false)
    Unit      Unit[]
}
