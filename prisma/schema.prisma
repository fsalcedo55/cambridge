generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @unique @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @unique @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String              @id @unique @default(cuid())
    name               String?
    email              String?             @unique
    emailVerified      DateTime?
    image              String?
    role               String?
    accounts           Account[]
    sessions           Session[]
    students           Student[]
    lessonPlans        LessonPlan[]
    lessonPlanComments LessonPlanComment[]
    lessonComments     LessonComment[]
    Feedback           Feedback[]
}

model Student {
    id                 String             @id @unique @default(cuid())
    studentFirstName   String
    studentLastName    String
    studentDateOfBirth String
    status             String
    teacher            User?              @relation(fields: [userId], references: [id])
    userId             String?
    lessonPlans        LessonPlan[]
    Lesson             Lesson[]
    entitlements       Entitlements[]
    lessonCompletions  LessonCompletion[]
    Feedback           Feedback[]

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LessonPlan {
    id           String              @id @unique @default(cuid())
    title        String
    date         String
    slidesUrl    String?
    homeworkSent Boolean?            @default(false)
    Student      Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId    String
    User         User                @relation(fields: [userId], references: [id], onDelete: NoAction)
    userId       String
    comments     LessonPlanComment[]

    @@index([studentId])
    @@index([userId])
}

model LessonPlanComment {
    id           String     @id @unique @default(cuid())
    content      String     @db.Text
    createdAt    DateTime   @default(now())
    LessonPlan   LessonPlan @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
    lessonPlanId String
    User         User       @relation(fields: [userId], references: [id], onDelete: NoAction)
    userId       String

    @@index([lessonPlanId])
    @@index([userId])
}

model Assignment {
    id       String  @id @unique @default(cuid())
    title    String
    url      String
    Lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId String?

    @@index([lessonId])
}

model Lesson {
    id                String             @id @unique @default(cuid())
    title             String
    photoUrl          String
    slidesUrl         String?
    number            Int
    published         Boolean            @default(false)
    objective         String?            @db.Text
    assignments       Assignment[]
    Student           Student?           @relation(fields: [studentId], references: [id])
    studentId         String?
    Unit              Unit               @relation(fields: [unitId], references: [id])
    unitId            String
    comments          LessonComment[]
    lessonCompletions LessonCompletion[]
    Feedback          Feedback[]

    @@index([studentId])
    @@index([unitId])
}

model LessonComment {
    id        String   @id @unique @default(cuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    Lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String
    User      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
    userId    String

    @@index([lessonId])
    @@index([userId])
}

model Unit {
    id        String   @id @unique @default(cuid())
    title     String
    number    Int
    photoUrl  String
    published Boolean  @default(false)
    Lesson    Lesson[]
    Level     Level    @relation(fields: [levelId], references: [id], onDelete: NoAction)
    levelId   String

    @@index([levelId])
}

model Level {
    id               String         @id @default(cuid())
    title            String
    number           Int
    published        Boolean        @default(false)
    Unit             Unit[]
    studentsEntitled Entitlements[]
}

model Entitlements {
    id        String   @id @unique @default(cuid())
    Level     Level?   @relation(fields: [levelId], references: [id], onDelete: Cascade)
    levelId   String?
    Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String?

    @@index([levelId])
    @@index([studentId])
}

model LessonCompletion {
    id          String   @id @unique @default(cuid())
    lessonId    String
    studentId   String
    completedAt DateTime @default(now())
    comments    String?  @db.Text

    Lesson  Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    Student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@index([lessonId])
    @@index([studentId])
}

enum PerformanceLevelTitle {
    Attitude
    Grammar
    Reading
    Speaking
    Vocabulary
    Writing
}

model PerformanceLevel {
    id               String                @id @unique @default(cuid())
    title            PerformanceLevelTitle
    weight           Int
    feedbackMetricId String

    FeedbackMetric FeedbackMetric @relation(fields: [feedbackMetricId], references: [id])

    @@index([feedbackMetricId])
}

model FeedbackMetric {
    id               String             @id @unique @default(cuid())
    feedbackId       String
    PerformanceLevel PerformanceLevel[]
    Feedback         Feedback[]

    @@index([feedbackId])
}

model Feedback {
    id               String @id @unique @default(cuid())
    studentId        String
    userId           String
    lessonId         String
    feedbackMetricId String

    Student        Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
    User           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    Lesson         Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    FeedbackMetric FeedbackMetric @relation(fields: [feedbackMetricId], references: [id])

    @@index([studentId])
    @@index([userId])
    @@index([lessonId])
    @@index([feedbackMetricId])
}
