generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String              @id @default(cuid())
    name               String?
    email              String?             @unique
    emailVerified      DateTime?
    image              String?
    role               String?
    accounts           Account[]
    sessions           Session[]
    students           Student[]
    lessonPlans        LessonPlan[]
    lessonPlanComments LessonPlanComment[]
}

model Student {
    id                 String       @id @default(cuid())
    studentFirstName   String
    studentLastName    String
    studentDateOfBirth String
    teacher            User?        @relation(fields: [userId], references: [id])
    userId             String?
    lessonPlans        LessonPlan[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LessonPlan {
    id        String              @id @default(cuid())
    title     String
    date      String
    Student   Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String
    User      User                @relation(fields: [userId], references: [id], onDelete: Restrict)
    userId    String
    comments  LessonPlanComment[]
}

model LessonPlanComment {
    id           String      @id @default(cuid())
    LessonPlan   LessonPlan? @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
    lessonPlanId String?
    User         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId       String?
}
